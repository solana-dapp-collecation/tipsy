{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siddh\\\\hack\\\\wallet-adapter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useEffect, useRef, useMemo, useState } from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, SystemProgram, Transaction, clusterApiUrl } from \"@solana/web3.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction toHex(buffer) {\n  return Array.prototype.map.call(buffer, x => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n}\n\nfunction App() {\n  _s();\n\n  var _selectedWallet$publi3;\n\n  const [logs, setLogs] = useState([]);\n\n  function addLog(log) {\n    setLogs(logs => [...logs, log]);\n  }\n\n  const recipient = useRef(null);\n  const amount = useRef(null);\n  const network = \"devnet\";\n  const [providerUrl, setProviderUrl] = useState(\"https://www.sollet.io\");\n  let connection = new Connection(clusterApiUrl('devnet'));\n  const urlWallet = useMemo(() => new Wallet(providerUrl, network), [providerUrl, network]);\n  const [selectedWallet, setSelectedWallet] = useState();\n  const [, setConnected] = useState(false);\n  useEffect(() => {\n    if (selectedWallet) {\n      selectedWallet.on(\"connect\", () => {\n        var _selectedWallet$publi, _selectedWallet$publi2;\n\n        setConnected(true);\n        addLog(`Connected to wallet ${(_selectedWallet$publi = (_selectedWallet$publi2 = selectedWallet.publicKey) === null || _selectedWallet$publi2 === void 0 ? void 0 : _selectedWallet$publi2.toBase58()) !== null && _selectedWallet$publi !== void 0 ? _selectedWallet$publi : \"--\"}`);\n      });\n      selectedWallet.on(\"disconnect\", () => {\n        setConnected(false);\n        addLog(\"Disconnected from wallet\");\n      });\n      void selectedWallet.connect();\n      return () => {\n        void selectedWallet.disconnect();\n      };\n    }\n  }, [selectedWallet]);\n\n  async function transferSol() {\n    try {\n      if (!selectedWallet) {\n        throw new Error(\"wallet not connected\");\n      }\n\n      let transaction = new Transaction().add(SystemProgram.transfer({\n        fromPubkey: selectedWallet.publicKey,\n        toPubkey: recipient.current.value,\n        lamports: amount.current.value\n      }));\n      let {\n        blockhash\n      } = await connection.getRecentBlockhash();\n      addLog(\"Blockhash: \" + blockhash);\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = selectedWallet.publicKey;\n      let signed = await selectedWallet.signTransaction(transaction);\n      addLog(\"Signed Tx: \" + signed);\n      let txid = await connection.sendRawTransaction(signed.serialize());\n      await connection.confirmTransaction(txid);\n      addLog(\"Transaction complete: Transaction Id -  \" + txid);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wallet Demo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Network: \", network]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Waller provider:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: providerUrl,\n        onChange: e => setProviderUrl(e.target.value.trim())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), selectedWallet && selectedWallet.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Wallet address: \", (_selectedWallet$publi3 = selectedWallet.publicKey) === null || _selectedWallet$publi3 === void 0 ? void 0 : _selectedWallet$publi3.toBase58(), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Enter a public key: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: recipient,\n        name: \"recipient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Enter amount to transfer (in Lamports): \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: amount,\n        name: \"amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: transferSol,\n        children: \"Transfer SOL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => selectedWallet.disconnect(),\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedWallet(urlWallet),\n        children: \"Connect to Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logs\",\n      children: logs.map((log, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: log\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ACluvvq0BDhlP+jo38owHsQqCys=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/siddh/hack/wallet-adapter/src/App.js"],"names":["React","useEffect","useRef","useMemo","useState","Wallet","Connection","SystemProgram","Transaction","clusterApiUrl","toHex","buffer","Array","prototype","map","call","x","toString","slice","join","App","logs","setLogs","addLog","log","recipient","amount","network","providerUrl","setProviderUrl","connection","urlWallet","selectedWallet","setSelectedWallet","setConnected","on","publicKey","toBase58","connect","disconnect","transferSol","Error","transaction","add","transfer","fromPubkey","toPubkey","current","value","lamports","blockhash","getRecentBlockhash","recentBlockhash","feePayer","signed","signTransaction","txid","sendRawTransaction","serialize","confirmTransaction","e","console","warn","target","trim","connected","i"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useRef, useMemo, useState } from \"react\";\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, SystemProgram, Transaction, clusterApiUrl } from \"@solana/web3.js\";\nfunction toHex(buffer: Buffer) {\n  return Array.prototype.map\n    .call(buffer, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n    .join(\"\");\n}\n\nfunction App() {\n  const [logs, setLogs] = useState([]);\n  function addLog(log: string) {\n    setLogs((logs) => [...logs, log]);\n  }\n  const recipient = useRef(null);\n  const amount = useRef(null);\n  const network = \"devnet\";\n  const [providerUrl, setProviderUrl] = useState(\"https://www.sollet.io\");\n  let connection = new Connection(clusterApiUrl('devnet'));\n  const urlWallet = useMemo(\n    () => new Wallet(providerUrl, network),\n    [providerUrl, network]\n  );\n\n  const [selectedWallet, setSelectedWallet] = useState();\n  const [, setConnected] = useState(false);\n  useEffect(() => {\n    if (selectedWallet) {\n      selectedWallet.on(\"connect\", () => {\n        setConnected(true);\n        addLog(\n          `Connected to wallet ${selectedWallet.publicKey?.toBase58() ?? \"--\"}`\n        );\n      });\n      selectedWallet.on(\"disconnect\", () => {\n        setConnected(false);\n        addLog(\"Disconnected from wallet\");\n      });\n      void selectedWallet.connect();\n      return () => {\n        void selectedWallet.disconnect();\n      };\n    }\n  }, [selectedWallet]);\n\n  async function transferSol() {\n    try {\n      if (!selectedWallet) {\n        throw new Error(\"wallet not connected\");\n      }\n      let transaction = new Transaction().add(\n        SystemProgram.transfer({\n          fromPubkey: selectedWallet.publicKey,\n          toPubkey: recipient.current.value,\n          lamports: amount.current.value,\n        })\n      );\n\n      let { blockhash } = await connection.getRecentBlockhash();\n\n      addLog(\"Blockhash: \" + blockhash);\n      transaction.recentBlockhash = blockhash;\n      transaction.feePayer = selectedWallet.publicKey;\n\n      let signed = await selectedWallet.signTransaction(transaction);\n\n      addLog(\"Signed Tx: \" + signed);\n      let txid = await connection.sendRawTransaction(signed.serialize());\n      await connection.confirmTransaction(txid);\n      addLog(\"Transaction complete: Transaction Id -  \" + txid);\n    } catch (e) {\n      console.warn(e);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Wallet Demo</h1>\n      <div>Network: {network}</div>\n      <div>\n        Waller provider:{\" \"}\n        <input\n          type=\"text\"\n          value={providerUrl}\n          onChange={(e) => setProviderUrl(e.target.value.trim())}\n        />\n      </div>\n      {selectedWallet && selectedWallet.connected ? (\n        <div>\n          <div>Wallet address: {selectedWallet.publicKey?.toBase58()}.</div>\n          <label> Enter a public key: </label>\n          <input type=\"text\" ref={recipient} name=\"recipient\" />\n          <label> Enter amount to transfer (in Lamports): </label>\n          <input type=\"text\" ref={amount} name=\"amount\" />\n\n          <button onClick={transferSol}>Transfer SOL</button>\n          <button onClick={() => selectedWallet.disconnect()}>\n            Disconnect\n          </button>\n        </div>\n      ) : (\n        <div>\n          <button onClick={() => setSelectedWallet(urlWallet)}>\n            Connect to Wallet\n          </button>\n        </div>\n      )}\n      <hr />\n      <div className=\"logs\">\n        {logs.map((log, i) => (\n          <>\n            {\" \"}\n            <div key={i}>{log}</div>\n            <br />\n          </>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}